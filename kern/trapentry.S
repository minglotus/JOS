/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>



###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER_NOEC(thdl0, T_DIVIDE)
TRAPHANDLER_NOEC(thdl1, T_DEBUG)
TRAPHANDLER_NOEC(thdl2, 2)
TRAPHANDLER_NOEC(thdl3, T_BRKPT)
TRAPHANDLER_NOEC(thdl4, T_OFLOW)
TRAPHANDLER_NOEC(thdl5, T_BOUND)
TRAPHANDLER_NOEC(thdl6, T_ILLOP)
TRAPHANDLER_NOEC(thdl7, T_DEVICE)
TRAPHANDLER(thdl8, T_DBLFLT)
TRAPHANDLER_NOEC(thdl9, 9)
/*interrupt 9 will not be generated by recent processors so T_COPROC is not defined in inc/trap.h*/
TRAPHANDLER(thdl10, T_TSS)
TRAPHANDLER(thdl11, T_SEGNP)
TRAPHANDLER(thdl12, T_STACK)
TRAPHANDLER(thdl13, T_GPFLT)
TRAPHANDLER(thdl14, T_PGFLT)
TRAPHANDLER_NOEC(thdl15, 15) //reserved 
TRAPHANDLER_NOEC(thdl16,16)
//interrupt 17-31 will not be generated by the processor


  //Lab 3: Your code here for _alltraps

.globl _alltraps
_alltraps:
	pushl %ds
	pushl %es
	pushal
	movw $GD_KD, %ax
	movw %ax, %ds
	movw %ax, %es	
		
	pushl %esp
	call trap

.data
.globl thdl
thdl:
	.long thdl0
	.long thdl1
	.long thdl2
	.long thdl3
	.long thdl4
	.long thdl5
	.long thdl6
	.long thdl7
	.long thdl8
	.long thdl9
	.long thdl10
	.long thdl11
	.long thdl12
	.long thdl13
	.long thdl14
	.long thdl15
	.long thdl16
